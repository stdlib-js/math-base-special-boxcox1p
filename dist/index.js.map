{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar expm1 = require( '@stdlib/math-base-special-expm1' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Computes a one-parameter Box-Cox transformation of `1+x`.\n*\n* ## Method\n*\n* When computing a one-parameter Box-Cox transformation\n*\n* -   If \\\\( \\lambda << 1 \\\\) and \\\\( \\ln( x ) < 1.0 \\\\), then the product \\\\( \\lambda \\cdot \\ln(x) \\\\) can lose precision, and, furthermore, \\\\( \\operatorname{expm1}(x) = x \\\\) for \\\\( x < \\epsilon \\\\).\n* -   For double-precision floating-point numbers, the range of the natural log is \\\\( \\[-744.44, 709.78\\] and \\\\( \\epsilon \\\\) is the smallest value produced.\n* -   The value range means that we will have \\\\( |\\lambda \\cdot \\ln(x)| < \\epsilon \\\\) whenever \\\\( |\\lambda| \\leq \\frac{\\epsilon}{-\\ln(d) \\\\), where \\\\( d \\\\) is the minimum double-precision floating-point number, thus corresponding to the value \\\\( \\approx 2.98 \\times 10^{-19} \\\\).\n*\n* For small `x` values, the same method described above applies with the modification that the smallest value returned by \\\\( \\operatorname{log1p}(x) \\\\) is the minimum representable value, not \\\\( \\epsilon \\\\). Furthermore, we need to guard against underflow when \\\\( \\operatorname{log1p}(x) < \\epsilon \\\\).\n*\n* @param {number} x - input value\n* @param {number} lambda - power parameter\n* @returns {number} Box-Cox transformation of `1+x`\n*\n* @example\n* var v = boxcox1p( 1.0, 2.5 );\n* // returns ~1.8627\n*\n* @example\n* var v = boxcox1p( 4.0, 2.5 );\n* // returns ~21.9607\n*\n* @example\n* var v = boxcox1p( 10.0, 2.5 );\n* // returns ~160.1246\n*\n* @example\n* var v = boxcox1p( 2.0, 0.0 );\n* // returns ~1.0986\n*\n* @example\n* var v = boxcox1p( -1.0, 2.5 );\n* // returns -0.4\n*\n* @example\n* var v = boxcox1p( 0.0, -1.0 );\n* // returns 0.0\n*\n* @example\n* var v = boxcox1p( -1.0, -1.0 );\n* // returns -Infinity\n*/\nfunction boxcox1p( x, lambda ) {\n\tvar lgx;\n\tif ( isnan( x ) || isnan( lambda ) || x < -1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === -1.0 && lambda < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tlgx = log1p( x );\n\tif (\n\t\tabs( lambda ) < 1.0e-19 ||\n\n\t\t// Guard against underflow...\n\t\t(\n\t\t\tabs( lgx ) < 1.0e-289 &&\n\t\t\tabs( lambda ) < 1.0e273\n\t\t)\n\t) {\n\t\treturn lgx;\n\t}\n\treturn expm1( lambda*lgx ) / lambda;\n}\n\n\n// EXPORTS //\n\nmodule.exports = boxcox1p;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-parameter Box-Cox transformation of `1+x`.\n*\n* @module @stdlib/math-base-special-boxcox1p\n*\n* @example\n* var boxcox1p = require( '@stdlib/math-base-special-boxcox1p' );\n*\n* var v = boxcox1p( 1.0, 2.5 );\n* // returns ~1.8627\n*\n* v = boxcox1p( 4.0, 2.5 );\n* // returns ~21.9607\n*\n* v = boxcox1p( 10.0, 2.5 );\n* // returns ~160.1246\n*\n* v = boxcox1p( 2.0, 0.0 );\n* // returns ~1.0986\n*\n* v = boxcox1p( -1.0, 2.5 );\n* // returns -0.4\n*\n* v = boxcox1p( 0.0, -1.0 );\n* // returns 0.0\n*\n* v = boxcox1p( -1.0, -1.0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar boxcox1p = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = boxcox1p;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EAkDrD,SAASC,EAAUC,EAAGC,EAAS,CAC9B,IAAIC,EACJ,OAAKL,EAAOG,CAAE,GAAKH,EAAOI,CAAO,GAAKD,EAAI,GAClC,IAEHA,IAAM,IAAQC,EAAS,EACpBH,GAERI,EAAMR,EAAOM,CAAE,EAEdL,EAAKM,CAAO,EAAI,OAIfN,EAAKO,CAAI,EAAI,QACbP,EAAKM,CAAO,EAAI,MAGVC,EAEDN,EAAOK,EAAOC,CAAI,EAAID,EAC9B,CAKAR,EAAO,QAAUM,IClDjB,IAAII,EAAW,IAKf,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "log1p", "abs", "expm1", "isnan", "NINF", "boxcox1p", "x", "lambda", "lgx", "boxcox1p"]
}
